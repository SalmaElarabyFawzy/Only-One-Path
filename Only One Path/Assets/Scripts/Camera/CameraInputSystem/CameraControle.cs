//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Camera/CameraInputSystem/CameraControle.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraControle : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraControle()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraControle"",
    ""maps"": [
        {
            ""name"": ""FPSCamera"",
            ""id"": ""cf6846de-7ec2-4951-ba70-237497eedd12"",
            ""actions"": [
                {
                    ""name"": ""MouseX"",
                    ""type"": ""Value"",
                    ""id"": ""881c1def-0d15-43e4-8c9c-0f1693629f19"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseY"",
                    ""type"": ""Value"",
                    ""id"": ""f45b9fc0-6ed3-4f8d-b10e-6451439087bf"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d1ca792c-0670-4daf-a60d-ff0be5833601"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""630e0cfc-1696-4cb8-bd79-4cf90c48fc76"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FPSCamera
        m_FPSCamera = asset.FindActionMap("FPSCamera", throwIfNotFound: true);
        m_FPSCamera_MouseX = m_FPSCamera.FindAction("MouseX", throwIfNotFound: true);
        m_FPSCamera_MouseY = m_FPSCamera.FindAction("MouseY", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FPSCamera
    private readonly InputActionMap m_FPSCamera;
    private IFPSCameraActions m_FPSCameraActionsCallbackInterface;
    private readonly InputAction m_FPSCamera_MouseX;
    private readonly InputAction m_FPSCamera_MouseY;
    public struct FPSCameraActions
    {
        private @CameraControle m_Wrapper;
        public FPSCameraActions(@CameraControle wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseX => m_Wrapper.m_FPSCamera_MouseX;
        public InputAction @MouseY => m_Wrapper.m_FPSCamera_MouseY;
        public InputActionMap Get() { return m_Wrapper.m_FPSCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FPSCameraActions set) { return set.Get(); }
        public void SetCallbacks(IFPSCameraActions instance)
        {
            if (m_Wrapper.m_FPSCameraActionsCallbackInterface != null)
            {
                @MouseX.started -= m_Wrapper.m_FPSCameraActionsCallbackInterface.OnMouseX;
                @MouseX.performed -= m_Wrapper.m_FPSCameraActionsCallbackInterface.OnMouseX;
                @MouseX.canceled -= m_Wrapper.m_FPSCameraActionsCallbackInterface.OnMouseX;
                @MouseY.started -= m_Wrapper.m_FPSCameraActionsCallbackInterface.OnMouseY;
                @MouseY.performed -= m_Wrapper.m_FPSCameraActionsCallbackInterface.OnMouseY;
                @MouseY.canceled -= m_Wrapper.m_FPSCameraActionsCallbackInterface.OnMouseY;
            }
            m_Wrapper.m_FPSCameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseX.started += instance.OnMouseX;
                @MouseX.performed += instance.OnMouseX;
                @MouseX.canceled += instance.OnMouseX;
                @MouseY.started += instance.OnMouseY;
                @MouseY.performed += instance.OnMouseY;
                @MouseY.canceled += instance.OnMouseY;
            }
        }
    }
    public FPSCameraActions @FPSCamera => new FPSCameraActions(this);
    public interface IFPSCameraActions
    {
        void OnMouseX(InputAction.CallbackContext context);
        void OnMouseY(InputAction.CallbackContext context);
    }
}
